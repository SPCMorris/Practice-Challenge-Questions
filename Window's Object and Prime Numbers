/*Take the arrays below and find the product of every prime number of each array, then sum the products together. Assume that the 
only type of arrays you will add to your code are like the below arrays and write your function in such a way as to be able to handle 
any number of "numbers" array dynamically.

For example: 

var numbers1 = [1,2,3,4,5,6,7,8] = 210, var numbers2 = [23,31,47,101,13] = 43999943 
total = 210 + 43999943
Finally, return total.

You must use higher order functions.*/


var numbers1 = [0,1,2,3,4,5,6,7,8];
var numbers2 = [23,31,47,101,13];
var numbers3 = [67, 93,201,1000,52];

/* Un-comment these two to add 10 to the total
var numbers4 = [3,4,6,8];
var numbers5 = [1,6,7,10];
*/

//My answer - 
function countArr() {
var storage = [], primeStor = [],total = 0;
//collects all of the arrays in the windows object 
  for(var i in window) {
    if(Array.isArray(window[i])) {
      storage.push(window[i]);
    }
  }
  
  storage.forEach(function(array){   
    array.forEach(function(x){   //extracts primes
       if((x === 2 || x === 3 || x === 5)) {
        primeStor.push(x);
      } else if(x % 2 !== 0 && x % 3 !== 0 && x !== 1) {
        primeStor.push(x);
      }
    });    //totals the product of each array in storage
    console.log(primeStor);
    total+= primeStor.reduce(function(a,b){
      return a*b;
    });  //resets the array containing the prime numbers for the next nested array
    primeStor = [];
  });
  return total;
}

console.log(countArr());
