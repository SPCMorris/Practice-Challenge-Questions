/*Use a hybrid prototype constructor and a function constructor for a car object that has the properties make, model and year. Give the
object the prototype "price" that will extact the cost from the "cost" object and log it with "The [make] is [cost]."

After that create 3 instances of the object using the hybrid consturctor and then using the function constructor. Use the arrays below 
to complete this problem.*/

//Here are the cars in order: Make, Model and Year
var chevy = ["Chevy", "Explorer", "2000"];
var nissan = ["Nissan", "Rogue", "2010"];
var ford = ["Ford", "F150", "2008"];

var cost = {
  "Ford": 30000,
  "Chevy": 4000,
  "Nissan": 23000
};

//Example of a Prototype using a hybrid prototype constructor
var Car = function(make, model, year) {
  this.make = make;
  this.model = model;
  this.year = year;
  
  //place the prototype inside the constructor - encapsulation
  Car.prototype.price = function(make) {
    for(var i in cost) {
      if(i === make) {
        console.log("The " + make + " is " + cost[i]);
      }
    }
  };
};

//Example of a method using a function constructor
var Car = function(make, model, year) {
  this.make = make;
  this.model = model;
  this.year = year;
  
  this.price = function() {
    for(var i in cost) {
      if(i === this.make) {
        console.log("The " + this.make + " is " + cost[i]);
      }
    }
  };
};

// our objects
var chevy = new Car(chevy[0], chevy[1], chevy[2]);
var nissan = new Car(nissan[0], nissan[1], nissan[2]);
var ford = new Car(ford[0], ford[1], ford[2]);

//Using prototypes creates inheritance by using just one function for every object - by reference. You only have to change the one prototype
ford.price("Ford");
chevy.price("Chevy");
nissan.price("Nissan");

//Using methods creates a seperate function in each object - by value. If you want to change the function you have to for each object
ford.price();
chevy.price();
nissan.price();
